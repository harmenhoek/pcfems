"""
Django settings for pcfems project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django.contrib.humanize',

    # third-party apps
    'crispy_forms',
    'activity_log',
    'simple_history',
    'sslserver',
    'bootstrap_datepicker_plus',
    # 'bootstrap4',
    'django_bootstrap5',
    # 'qr_code',
    'macros',
    'crispy_bootstrap5',
    'dynamic_preferences',

    # own apps
    'ems.apps.EmsConfig',
    'users.apps.UsersConfig',
    'ems_manage.apps.EmsManageConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # third-party apps
    'activity_log.middleware.ActivityLogMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
]

ROOT_URLCONF = 'pcfems.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'dynamic_preferences.processors.global_preferences',
            ],
        },
    },
]

WSGI_APPLICATION = 'pcfems.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'


USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'


# CUSTOM SETTINGS

# CRISPY_TEMPLATE_PACK = 'bootstrap4'
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"

LOGIN_REDIRECT_URL = 'ems-home'
LOGIN_URL = 'login'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # full path to the folder where Django saves the files on the file system
MEDIA_URL = '/media/' # how we access the image in the browser. Location of the url.


# activity_log app

# For writing log to another DB
DATABASE_ROUTERS = ['activity_log.router.DatabaseAppsRouter']
DATABASE_APPS_MAPPING = {'activity_log': 'logs'}

# Create DB automatically (for postgres, and may be mysql).
# We create log database automatically using raw SQL in pre_migrate signal.
# You must insure, that DB user has permissions for creation databases.
# Tested only for postgresql
ACTIVITYLOG_AUTOCREATE_DB = False

# App settings

# Log anonymous actions?
ACTIVITYLOG_ANONYMOUS = True

# Update last activity datetime in user profile. Needs updates for user model.
ACTIVITYLOG_LAST_ACTIVITY = True

# Only this methods will be logged
ACTIVITYLOG_METHODS = ('POST', 'GET')

# List of response statuses, which logged. By default - all logged.
# Don't use with ACTIVITYLOG_EXCLUDE_STATUSES
ACTIVITYLOG_STATUSES = (200, )

# List of response statuses, which ignores. Don't use with ACTIVITYLOG_STATUSES
# ACTIVITYLOG_EXCLUDE_STATUSES = (302, )

# URL substrings, which ignores
ACTIVITYLOG_EXCLUDE_URLS = ('/admin/activity_log/activitylog', )


# Max upload size
DATA_UPLOAD_MAX_MEMORY_SIZE = 2621440*10

# Email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True



# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'file': {
#             'level': 'DEBUG',
#             'class': 'logging.FileHandler',
#             'filename': 'debug.log',
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['file'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#     },
# }

# BOOTSTRAP4 = {
#     'include_jquery': True,
# }

BOOTSTRAP5 = {
    'include_jquery': True,
}

DEFAULT_IMAGE = 'default.png'

EMS_VERSION = '1.1'

TIME_ZONE = 'Europe/Amsterdam'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 2021-05-11 settings below are not yet working

# available settings with their default values
DYNAMIC_PREFERENCES = {

    # a python attribute that will be added to model instances with preferences
    # override this if the default collide with one of your models attributes/fields
    'MANAGER_ATTRIBUTE': 'preferences',

    # The python module in which registered preferences will be searched within each app
    'REGISTRY_MODULE': 'dynamic_preferences_registry',

    # Allow quick editing of preferences directly in admin list view
    # WARNING: enabling this feature can cause data corruption if multiple users
    # use the same list view at the same time, see https://code.djangoproject.com/ticket/11313
    'ADMIN_ENABLE_CHANGELIST_FORM': False,

    # Customize how you can access preferences from managers. The default is to
    # separate sections and keys with two underscores. This is probably not a settings you'll
    # want to change, but it's here just in case
    'SECTION_KEY_SEPARATOR': '__',

    # Use this to disable caching of preference. This can be useful to debug things
    'ENABLE_CACHE': True,

    # Use this to disable checking preferences names. This can be useful to debug things
    'VALIDATE_NAMES': True,
}



# TODO
APPLICATION_SLUG_PREFIX = "PCF"  # Only applies to new items added, old items will remain old value!
APPLICATION_LOGO_SRC = "favicon-512x512.png"  # Pick a file in static/ems/ or False
QR_CODE_BASEURL = "AUTO"  # Set to AUTO for using the current domain, or specify custom here (e.g. "https://pcfems.utwente.nl/").



# Textual
APPLICATION_OWNER = "Physics of Complex Fluids"

# General
MAINTENANCE_MODE = False  #  Shows maintenance page while system is being updated.

HOME_COLUMNS = ["ID", "Image", "Item", "Category", "Location", "Status", "User", "Flag"]
HOME_COLUMNS_WEIGHT = [0, 0, 5, 4, 3, 4, 3, 0]
HOME_COLUMNS_HIDDEN = ["Description", "Owner"]
HOME_COLUMNS_SEARCH = True  # If False, no individual column search visible.

# Storage
IMAGE_COMPRESSION = True
IMAGE_COMPRESSION_RATIO = 0.25
MAX_UPLOAD_FILE_SIZE = False

# SETTINGS USAGE IN TEMPLATES LIKE:
# 1. load ems_customtags
# 2. use like:
#     {% settings_value "APPLICATION_FOOTER" %}
#     {% settings_value "SHOW_VERSION" as showversion %}

USER_PERMISSIONS = ['is_admin', 'is_itemmoderator', 'is_usermoderator']



try:
    from pcfems.local_settings import *
except ImportError as e:
    raise Exception(e)
