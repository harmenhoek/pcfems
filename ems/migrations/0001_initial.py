# Generated by Django 3.2.2 on 2021-06-11 08:36

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Cabinet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=10)),
                ('nickname', models.CharField(blank=True, max_length=25, null=True)),
                ('main_content', models.CharField(blank=True, max_length=50, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='cabinet_pics')),
            ],
            options={
                'ordering': ('lab__number', 'number'),
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Please verify that no such category already exists.', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Flag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flag', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('icon', models.CharField(default='bug', help_text='Set a icon from <a target="_blank" href="https://fontawesome.com/icons?m=free">this library</a>.', max_length=100)),
            ],
            options={
                'ordering': ('flag',),
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qrid', models.SlugField(blank=True, max_length=10, null=True)),
                ('version', models.IntegerField(blank=True, default=1, null=True)),
                ('labelstatus', models.DateTimeField(blank=True, default=None, null=True)),
                ('brand', models.CharField(max_length=100)),
                ('model', models.CharField(help_text='If multiple parts (e.g. proprietary power supply) with multiple models, comma separate models.', max_length=100)),
                ('title', models.CharField(help_text="Add short title that describes the item. E.g. 'Multimeter 0-1000V'.", max_length=25)),
                ('serial', models.CharField(blank=True, help_text='Comma separate multiple serial numbers.', max_length=100, null=True)),
                ('description', models.TextField(help_text='Add as many terms printed on the item and possible search terms.')),
                ('purchased_on', models.DateField(blank=True, default='', null=True)),
                ('purchased_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('warranty', models.BooleanField(default=False)),
                ('warranty_expiration', models.DateField(blank=True, null=True)),
                ('next_service_date', models.DateField(blank=True, null=True)),
                ('added_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_scanned', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('tracking', models.BooleanField(default=True, help_text='Tracking allows for assigning an item to a user and location, common items such as multimeters are not tracked.')),
                ('status', models.BooleanField(default=True)),
                ('parts', models.PositiveIntegerField(default=1, help_text='Number of separate parts, e.g. when an item has a proprietary power supply.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('date_inuse', models.DateField(blank=True, null=True)),
                ('date_return', models.DateField(blank=True, help_text='Optional, but recommended.', null=True)),
                ('flag_comment', models.CharField(blank=True, max_length=100, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='item_pics')),
                ('image2', models.ImageField(blank=True, null=True, upload_to='item_pics')),
                ('added_by', models.ForeignKey(limit_choices_to={'is_superuser': False}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='addeduser', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(blank=True, default='', help_text='New categories can be added in Admin/Manage/Categories.', on_delete=django.db.models.deletion.SET_DEFAULT, to='ems.category')),
                ('flag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ems.flag')),
            ],
        ),
        migrations.CreateModel(
            name='Lab',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=6)),
                ('nickname', models.CharField(blank=True, default='', max_length=20, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='lab_pics')),
                ('manager', models.ForeignKey(blank=True, default=2, limit_choices_to={'is_superuser': False}, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Setup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('image', models.ImageField(blank=True, null=True, upload_to='setup_pics')),
                ('lab', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ems.lab')),
                ('manager', models.ForeignKey(blank=True, default='undefined', limit_choices_to={'is_superuser': False}, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ItemLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('log', models.TextField()),
                ('file1', models.FileField(blank=True, null=True, upload_to='')),
                ('file1_name', models.CharField(blank=True, max_length=20, null=True)),
                ('file2', models.FileField(blank=True, null=True, upload_to='')),
                ('file2_name', models.CharField(blank=True, max_length=20, null=True)),
                ('added_by', models.ForeignKey(limit_choices_to={'is_superuser': False}, on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='ems.item')),
            ],
        ),
        migrations.CreateModel(
            name='ItemImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('image', models.ImageField(upload_to='item_pics')),
                ('caption', models.CharField(blank=True, max_length=200, null=True)),
                ('added_by', models.ForeignKey(limit_choices_to={'is_superuser': False}, on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='ems.item')),
            ],
        ),
        migrations.AddField(
            model_name='item',
            name='location',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='ems.setup'),
        ),
        migrations.AddField(
            model_name='item',
            name='purchased_by',
            field=models.ForeignKey(blank=True, limit_choices_to={'is_superuser': False}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='purchaseduser', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='item',
            name='storage_location',
            field=models.ForeignKey(blank=True, default='', help_text='New storage locations can be added in Admin/Manage/Locations.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='ems.cabinet'),
        ),
        migrations.AddField(
            model_name='item',
            name='updated_by',
            field=models.ForeignKey(limit_choices_to={'is_superuser': False}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updateduser', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='item',
            name='user',
            field=models.ForeignKey(blank=True, help_text='Optional, only the location is mandatory.', limit_choices_to={'is_superuser': False}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='itemuser', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='HistoricalSetup',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('image', models.TextField(blank=True, max_length=100, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('lab', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ems.lab')),
                ('manager', models.ForeignKey(blank=True, db_constraint=False, default='undefined', limit_choices_to={'is_superuser': False}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical setup',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalLab',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('number', models.CharField(max_length=6)),
                ('nickname', models.CharField(blank=True, default='', max_length=20, null=True)),
                ('image', models.TextField(blank=True, max_length=100, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('manager', models.ForeignKey(blank=True, db_constraint=False, default=2, limit_choices_to={'is_superuser': False}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical lab',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalItemLog',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('added_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('log', models.TextField()),
                ('file1', models.TextField(blank=True, max_length=100, null=True)),
                ('file1_name', models.CharField(blank=True, max_length=20, null=True)),
                ('file2', models.TextField(blank=True, max_length=100, null=True)),
                ('file2_name', models.CharField(blank=True, max_length=20, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('added_by', models.ForeignKey(blank=True, db_constraint=False, limit_choices_to={'is_superuser': False}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ems.item')),
            ],
            options={
                'verbose_name': 'historical item log',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalItemImage',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('added_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('image', models.TextField(max_length=100)),
                ('caption', models.CharField(blank=True, max_length=200, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('added_by', models.ForeignKey(blank=True, db_constraint=False, limit_choices_to={'is_superuser': False}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ems.item')),
            ],
            options={
                'verbose_name': 'historical item image',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalItem',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('qrid', models.SlugField(blank=True, max_length=10, null=True)),
                ('version', models.IntegerField(blank=True, default=1, null=True)),
                ('labelstatus', models.DateTimeField(blank=True, default=None, null=True)),
                ('brand', models.CharField(max_length=100)),
                ('model', models.CharField(help_text='If multiple parts (e.g. proprietary power supply) with multiple models, comma separate models.', max_length=100)),
                ('title', models.CharField(help_text="Add short title that describes the item. E.g. 'Multimeter 0-1000V'.", max_length=25)),
                ('serial', models.CharField(blank=True, help_text='Comma separate multiple serial numbers.', max_length=100, null=True)),
                ('description', models.TextField(help_text='Add as many terms printed on the item and possible search terms.')),
                ('purchased_on', models.DateField(blank=True, default='', null=True)),
                ('purchased_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('warranty', models.BooleanField(default=False)),
                ('warranty_expiration', models.DateField(blank=True, null=True)),
                ('next_service_date', models.DateField(blank=True, null=True)),
                ('added_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_scanned', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('tracking', models.BooleanField(default=True, help_text='Tracking allows for assigning an item to a user and location, common items such as multimeters are not tracked.')),
                ('status', models.BooleanField(default=True)),
                ('parts', models.PositiveIntegerField(default=1, help_text='Number of separate parts, e.g. when an item has a proprietary power supply.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('date_inuse', models.DateField(blank=True, null=True)),
                ('date_return', models.DateField(blank=True, help_text='Optional, but recommended.', null=True)),
                ('flag_comment', models.CharField(blank=True, max_length=100, null=True)),
                ('image', models.TextField(blank=True, max_length=100, null=True)),
                ('image2', models.TextField(blank=True, max_length=100, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('added_by', models.ForeignKey(blank=True, db_constraint=False, limit_choices_to={'is_superuser': False}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(blank=True, db_constraint=False, default='', help_text='New categories can be added in Admin/Manage/Categories.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ems.category')),
                ('flag', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ems.flag')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ems.setup')),
                ('purchased_by', models.ForeignKey(blank=True, db_constraint=False, limit_choices_to={'is_superuser': False}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('storage_location', models.ForeignKey(blank=True, db_constraint=False, default='', help_text='New storage locations can be added in Admin/Manage/Locations.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ems.cabinet')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, limit_choices_to={'is_superuser': False}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, db_constraint=False, help_text='Optional, only the location is mandatory.', limit_choices_to={'is_superuser': False}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical item',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalFlag',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('flag', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('icon', models.CharField(default='bug', help_text='Set a icon from <a target="_blank" href="https://fontawesome.com/icons?m=free">this library</a>.', max_length=100)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical flag',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCategory',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(help_text='Please verify that no such category already exists.', max_length=100)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical category',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCabinet',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('number', models.CharField(max_length=10)),
                ('nickname', models.CharField(blank=True, max_length=25, null=True)),
                ('main_content', models.CharField(blank=True, max_length=50, null=True)),
                ('image', models.TextField(blank=True, max_length=100, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('lab', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ems.lab')),
                ('owner', models.ForeignKey(blank=True, db_constraint=False, help_text='Cabinet owner is person whose stuff is stored in it.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical cabinet',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='cabinet',
            name='lab',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ems.lab'),
        ),
        migrations.AddField(
            model_name='cabinet',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='Cabinet owner is person whose stuff is stored in it.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cabinet_owner', to=settings.AUTH_USER_MODEL),
        ),
    ]
